generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id          String  @id @default(uuid())
  userId      String  @unique
  name        String
  username    String?
  description String?
  email       String  @db.Text
  imageUrl    String  @db.Text

  createdPosts          Post[]         @relation("createdPosts")
  likedPosts            Like[]
  comments              Comment[]
  receivedNotifications Notification[] @relation("receivedNotifications")
  sentNotifications     Notification[] @relation("sentNotifications")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id            String         @id @default(uuid())
  title         String
  description   String         @db.Text
  tag           String
  likes         Like[]
  comments      Comment[]
  notifications Notification[]

  profileId String
  profile   Profile @relation("createdPosts", fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model Like {
  id        String  @id @default(uuid())
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  postId    String
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([profileId])
  @@index([postId])
}

model Comment {
  id        String  @id @default(uuid())
  text      String  @db.Text
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  postId    String
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([profileId])
  @@index([postId])
}

enum NotificationType {
  LIKE
  COMMENT
}

model Notification {
  id       String           @id @default(uuid())
  type     NotificationType
  isActive Boolean
  value    String?

  postId     String
  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   Profile @relation("receivedNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
  senderId   String
  sender     Profile @relation("sentNotifications", fields: [senderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([postId])
  @@index([receiverId])
  @@index([senderId])
}
